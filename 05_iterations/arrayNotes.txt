| ЁЯФБ Loop/Method       | рдХрд┐рд╕ рдкрд░ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ          | рдирдпрд╛ рдбреЗрдЯрд╛ рд▓реМрдЯрд╛рддрд╛ рд╣реИ?         | рдореМрдЬреВрджрд╛ рдбреЗрдЯрд╛ рдмрджрд▓рддрд╛ рд╣реИ?                | Notes (рдХреИрд╕реЗ рдФрд░ рдХрдм рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ)   |
| -------------------- | ------------------------ | -----------------------| -------------------------------- | ----------------------------------|
| `for`                | Array / Numbers          | тЭМ рдирд╣реАрдВ                  | тЬЕ рд╣рд╛рдБ (рдЕрдЧрд░ рдЕрдВрджрд░ рд╕реЗ рдмрджрд▓реЗ рддреЛ)           | Index рдЪрд╛рд╣рд┐рдП рд╣реЛ рддреЛ best рд╣реИ             |
| `while`              | Condition-based          | тЭМ рдирд╣реАрдВ                  | тЬЕ рд╣рд╛рдБ (рдЕрдЧрд░ рдЕрдВрджрд░ рд╕реЗ рдмрджрд▓реЗ рддреЛ)           | рдЬрдм рдХрдВрдбреАрд╢рди рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реЛ               |
| `for...of`           | Iterable (Array, String) | тЭМ рдирд╣реАрдВ                  | тЬЕ рд╣рд╛рдБ (рдЕрдЧрд░ manually рдХрд░реЗрдВ рддреЛ)         | рд╕рд┐рд░реНрдл values рдкрд░ рдЪрд▓рддрд╛ рд╣реИ               |
| `for...in`           | Object                   | тЭМ рдирд╣реАрдВ                  | тЬЕ рд╣рд╛рдБ (рдЕрдЧрд░ рдЕрдВрджрд░ рд╕реЗ рдмрджрд▓реЗ рддреЛ)           | Keys рдХреЗ рд▓рд┐рдП useful рд╣реИ                |
| `forEach()`          | Array                    | тЭМ рдирд╣реАрдВ                  | тЬЕ рд╣рд╛рдБ (modification рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ)     | Break рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ                   |
| `map()`              | Array                    | тЬЕ рд╣рд╛рдБ (рдирдпрд╛ array)       | тЭМ рдирд╣реАрдВ                             | рдирдпрд╛ array рдмрдирд╛рдирд╛ рд╣реЛ рддреЛ best            |
| `filter()`           | Array                    | тЬЕ рд╣рд╛рдБ (рдирдпрд╛ array)       | тЭМ рдирд╣реАрдВ                             | Conditions рд╕реЗ filtering            |
| `reduce()`           | Array                    | тЬЕ рд╣рд╛рдБ (рдПрдХ single value) | тЭМ рдирд╣реАрдВ                            | Array рдХреЛ single value рдореЗрдВ рдмрджрд▓рддрд╛ рд╣реИ     |
| `find()`             | Array                    | тЬЕ рд╣рд╛рдБ (first match)     | тЭМ рдирд╣реАрдВ                            | рдкрд╣рд▓рд╛ matching item рдЪрд╛рд╣рд┐рдП             |
| `some()` / `every()` | Array                    | тЬЕ рд╣рд╛рдБ (true/false)      | тЭМ рдирд╣реАрдВ                            | Check рдХрд░рддрд╛ рд╣реИ condition              |



ЁЯУШ JavaScript Loops & Methods тАУ рдкреВрд░рд╛ Notes (рд╣рд┐рдВрджреА рдореЗрдВ)

ЁЯФБ 1. for loop
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдЬрдм index рдЪрд╛рд╣рд┐рдП рд╣реЛ рдпрд╛ manually control рд░рдЦрдирд╛ рд╣реЛ
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
for (let i = 0; i < array.length; i++) {
  // рдХрд╛рдо
}

ЁЯФБ 2. while loop
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдЬрдм рдкрддрд╛ рди рд╣реЛ рдХрд┐рддрдиреА рдмрд╛рд░ рдЪрд▓рд╛рдирд╛ рд╣реИ
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
while (condition) {
  // рдХрд╛рдо
}

ЁЯФБ 3. do...while loop
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдЬрдм рдХрдо рд╕реЗ рдХрдо рдПрдХ рдмрд╛рд░ рдЪрд▓рд╛рдирд╛ рд╣реЛ
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
do {
  // рдХрд╛рдо
} while (condition);

ЁЯФБ 4. for...of loop
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: Iterable рдЪреАрдЬрд╝реЛрдВ (рдЬреИрд╕реЗ Array, String) рдХреЗ values рдкрд░
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
for (let value of array) {
  // value рдкрд░ рдХрд╛рдо
}

ЁЯФБ 5. for...in loop
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: Objects рдХреЗ keys рдкрд░
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
for (let key in object) {
  console.log(object[key]);
}

ЁЯФБ 6. forEach() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рд╕рд┐рд░реНрдл Arrays рдкрд░
ЁЯУМ Return: тЭМ рдХреБрдЫ return рдирд╣реАрдВ рдХрд░рддрд╛
ЁЯУМ Structure:
array.forEach((value, index) => {
  // value/index рдкрд░ рдХрд╛рдо
});

ЁЯФБ 7. map() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдЬрдм рд╣рд░ element рдкрд░ рдХреБрдЫ рдмрджрд▓рд╛рд╡ рдХрд░рдХреЗ рдирдпрд╛ array рдЪрд╛рд╣рд┐рдП
ЁЯУМ Return: тЬЕ рдирдпрд╛ array
ЁЯУМ Structure:
let result = array.map((value, index) => {
  return value * 2;
});

ЁЯФБ 8. filter() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдХреБрдЫ condition рд╡рд╛рд▓рд╛ filtered array рдЪрд╛рд╣рд┐рдП
ЁЯУМ Return: тЬЕ рдирдпрд╛ array
ЁЯУМ Structure:
let filtered = array.filter((value) => value > 2);

ЁЯФБ 9. reduce() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдкреВрд░рд╛ array рдПрдХ single value рдореЗрдВ рдмрджрд▓рдирд╛ рд╣реЛ
ЁЯУМ Return: тЬЕ single value (number, string, object etc.)
ЁЯУМ Structure:
let total = array.reduce((acc, value) => acc + value, 0);

ЁЯФБ 10. find() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓: рдкрд╣рд▓рд╛ matching element рдЪрд╛рд╣рд┐рдП
ЁЯУМ Return: тЬЕ рдкрд╣рд▓рд╛ match рдпрд╛ undefined
ЁЯУМ Structure:
let result = array.find((val) => val > 3);

ЁЯФБ 11. some() / every() method
ЁЯУМ рдЗрд╕реНрддреЗрдорд╛рд▓:
- some: рдХрдо рд╕реЗ рдХрдо рдПрдХ element condition pass рдХрд░реЗ
- every: рд╕рд╛рд░реЗ elements condition pass рдХрд░реЗрдВ
ЁЯУМ Return: тЬЕ true рдпрд╛ false
ЁЯУМ Structure:
let hasValue = array.some(val => val > 5);
let allGood = array.every(val => val < 10);

| Point                                             | Detail                           |
| ------------------------------------------------- | -------------------------------- |
| ЁЯОп Mutable рд╣реИ                                     | Original array рдХреЛ modify рдХрд░рддрд╛ рд╣реИ |
| ЁЯТе Default `sort()` strings рдХреЛ рд╣реА compare рдХрд░рддрд╛ рд╣реИ |                                  |
| тЬЕ Custom sort рдХреЗ рд▓рд┐рдП `compareFunction` рдЬрд╝рд░реВрд░реА рд╣реИ  |                                  |
| ЁЯз╣ Stable sort рд╣реИ (ES2019 рд╕реЗ)                     |                                  |



| Task                      | Code                                |
| ------------------------- | ----------------------------------- |
| Ascending sort (numbers)  | `arr.sort((a, b) => a - b)`         |
| Descending sort (numbers) | `arr.sort((a, b) => b - a)`         |
| String alphabetical       | `arr.sort()`                        |
| Object sort by age        | `arr.sort((a, b) => a.age - b.age)` |


ЁЯза Quick Summary Table:

| Method/Loop    | Array рдкрд░ | Object рдкрд░ | Return рдХрд░рддрд╛ рд╣реИ? | рдирдпрд╛ рдбреЗрдЯрд╛ рджреЗрддрд╛ рд╣реИ? | Syntax Simple? | Remarks |
|----------------|-----------|------------|------------------|-------------------|----------------|---------|
| for            | тЬЕ        | тЭМ         | тЭМ               | тЭМ                | ЁЯСН              | Index control |
| while          | тЬЕ        | тЭМ         | тЭМ               | тЭМ                | ЁЯСН              | Condition-based |
| do...while     | тЬЕ        | тЭМ         | тЭМ               | тЭМ                | ЁЯСН              | Runs at least once |
| for...of       | тЬЕ        | тЭМ         | тЭМ               | тЭМ                | ЁЯСН              | For values |
| for...in       | тЭМ        | тЬЕ         | тЭМ               | тЭМ                | ЁЯСН              | For keys |
| forEach()      | тЬЕ        | тЭМ         | тЭМ               | тЭМ                | ЁЯСН              | Simple, can't break |
| map()          | тЬЕ        | тЭМ         | тЬЕ               | тЬЕ                | ЁЯСН              | Return new array |
| filter()       | тЬЕ        | тЭМ         | тЬЕ               | тЬЕ                | ЁЯСН              | Useful for conditions |
| reduce()       | тЬЕ        | тЭМ         | тЬЕ               | тЬЕ                | Medium          | Reduces to one |
| find()         | тЬЕ        | тЭМ         | тЬЕ               | тЬЕ                | ЁЯСН              | First match |
| some()         | тЬЕ        | тЭМ         | тЬЕ               | тЭМ                | ЁЯСН              | At least one |
| every()        | тЬЕ        | тЭМ         | тЬЕ               | тЭМ                | ЁЯСН              | All match |
  
